#!/bin/bash

# cronnews - a script from the Audio News fetching Script Set "newsme"

# Based on the excellent work of Doug Crompton - WA3DSP "playnews" from 3/2015
# playnews v0.5 - WA3DSP 3/2015
# cronnews V1.0 - K8SN 10/2015 

# Script to play ARRL News or ARN files generated by loadnews

# This code is written to work on the hamvoip.org BBB/RPi2 Allstar releases
# All required packages are pre-installed on those systems.

# For proper operation holdofftelem in rpt.conf should either not be defined or
# defined as =0  This stops keyups from delaying the news during its playing

# You can run this script from a cron job or from the command line at least
# 15 minutes before the defined run time (TIME value) but it can be scheduled
# anytime within 24 hours prior to the run time.

# This code is written to work on the hamvoip.org BBB/RPi2 Allstar releases
# All required packages are pre-installed on those systems.
# 
# For proper operation holdofftelem in rpt.conf should either not be defined or
# defined as =0  This stops keyups from delaying the news during its playing
#
# The audio files ARRLstart5, ARRLstart10, ARRLstart, ARRLcontinue, ARRLstop
# and ARNstart, ARNstart10, ARNstart, ARNcontinue, ARNstop
# are supplied but could be customized for your needs. The audio
# files must be in the directory defined by VOICEDIR
#
# ARRLstart10 or ARNstart10   - voice message at ten minutes before start
# ARRLstart5 or ARNstart5     - voice message at five minutes before start
# ARRLstart or ARNstart       - voice message at start of play
# ARRLcontinue or ARNcontinue - voice message at breaks
# ARRLstop or ARNstop         - voice message at end of play

# Usage:
# /etc/asterisk/local/newsme/cronnews NEWSTYPE HH:MM {NODE_NUMBER} [ALL]

# Script Examples:
#	/etc/asterisk/local/newsme/cronnews ARN 21:00
#		- will schedule segmented ARN report at 9pm on the default Node.

#	/etc/asterisk/local/newsme/cronnews ARN 21:00 2000 
#		- will schedule segmented ARN report at 9pm on node 2000

# /etc/asterisk/local/newsme/cronnews ARRL 21:00 2000 ALL
#		- will schedule an uninterupted  ARRL report at 9pm on node 2000
#	    

#---------------------------------------------xxxx Start xxxx-------------------------------------------------------------------------------------- 

# Does the /etc/asterisk/Config File Exist?
	if [ ! -f /etc/asterisk/newsme.conf ]
	  then
	    echo "newsme config file not found - Did you copy it from your playnews directory"
	    echo "to your /etc/asterisk directory? - This must be done for proper operation. "
	  exit 1
	fi

if [ -f /tmp/event ]
then
exit 1
fi
	
# Read Site Config File:
	source /etc/asterisk/newsme.conf
	
# Make and define the log file environment:
	mkdir -p /tmp/$DEFAULT_LAST_RUN/
	runfile=/tmp/$DEFAULT_LAST_RUN/runlog.log
	me=`basename "$0"`

# Starting cron news:	
	echo "Starting $me at $(date +%Y-%m-%d.%H:%M:%S)."
	echo "$(date +%Y-%m-%d.%H:%M:%S):($me):--- $me Requested ---" >> $runfile	

# Check to see if the required files are in place
	if [ ! -f $VOICEDIR/ARNstart.ul ]
	  then
	    echo "newsme voice files not found - check VOICEDIR in script" | tee -a $runfile
	    echo "$(date +%Y-%m-%d.%H:%M:%S):($me):$VOICEDIR not present. Script Ending" >> $runfile
	    exit 1
	fi

# Check to make sure we are running either ARN or ARRL
	if [ -z "$1" ]
	  then
	    echo "No news type specified use ARN or ARRL here"
      	echo "Ending $me at $(date +%Y-%m-%d.%H:%M:%S)."
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):No News Type Specified. Script Ending" >> $runfile
	    exit 1
	else
	     NEWSTYPE=${1^^}
	fi    
	 
# Lets check to make sure the name is correctly entered	     	     
	if [ "$NEWSTYPE" != "ARN" ] && [ "$NEWSTYPE" != "ARRL" ]
	  then 
	     echo "The requested News  must be ARRL or ARN currently $NEWSTYPE is NOT supported"
	     echo "$(date +%Y-%m-%d.%H:%M:%S):($me):ERROR! improper provider Script Ending" >> $runfile
	     exit 1
	fi         

# Node number on our server to schedule the play
# Optionally defined here or as optional third command line parameter
	if [ -z "$3" ]
	  then
	     NODE=$DEFAULT_NODE
	  else
	     NODE=$3
	fi

# Play the Parts or the whole at once 
# Optionally defined here or as optional fourth command line parameter
	if [ -z "$4" ]
	  then
	     PLAYALL="NO"
	  else
	     PLAYALL=$4
	fi

# Time to start - 24 hour time - required 2nd command line parameter
# Time example 03:19 = 3:19 AM, 22:45 = 10:45 PM 
	if [ -z "$2" ]
	  then
	    echo "No Time supplied - Enter 24 hour time to play as 00:00 - (7 PM = 19:00)"
	    echo "$(date +%Y-%m-%d.%H:%M:%S):($me):No time proivded. Script Ended" >> $runfile
	    exit 1
	fi
	TIME=$2


echo "$(date +%Y-%m-%d.%H:%M:%S):($me):parms.a=Source:$NEWSTYPE Time:$TIME">> $runfile	
echo "$(date +%Y-%m-%d.%H:%M:%S):($me):parms.b=Node:$NODE Playall:$PLAYALL" >> $runfile	


# IF we already have a cron scheduled to run we won't to it again...
	if [ -f /tmp/$[NODE]cronnewspid.txt ]
	  then 
	    echo "Aready have a cron going. We will stop that one, and re-schedule this one."
	    echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Previous CRON scheduled. Replacing" >> $runfile
	    /etc/asterisk/local/newsme/stopnews $NODE CRON
	    echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Stopped existing CRON - Script Continues" >> $runfile
	    echo "$(date +%Y-%m-%d.%H:%M:%S):($me):parms.a=Source:$NEWSTYPE Time:$TIME">> $runfile	
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):parms.b=Node:$NODE Playall:$PLAYALL" >> $runfile
  fi

# Check to see if the /tmp/$NEWSTYPE/maxpart.txt file is present and accounted for.
# IF not, we need to go get the files from the selected Service
	if [ ! -f /tmp/$NEWSTYPE/maxpart.txt ]
	  then
	    echo "No $NEWSTYPE News. Downloaded"
	    echo "$(date +%Y-%m-%d.%H:%M:%S):($me):News Files don't exist. Fetching" >> $runfile
	    /etc/asterisk/local/newsme/loadnews $NEWSTYPE 
	    
	fi
	
# Write the PID of this script to cronnewspid.txt so if we need to stop it with stopnews we know where it lives.
	PID=$$
	echo $PID > /tmp/${NODE}cronnewspid.txt
	echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Parameters Correct - Script Starting" >> $runfile
	echo "Process ID for this session is $PID."
	echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Process ID is $PID" >> $runfile
			
	# Last warning time - 5 minutes before
		TIME5=`date --date "$TIME now 5 minutes ago" +%H:%M`
		
	# First warning time - 10 minutes before
		TIME10=`date --date "$TIME now 10 minutes ago" +%H:%M` 
	
	# Show Time Variables
		echo "$NEWSTYPE news will start at $TIME and use $MODE mode on"
		echo "node - $NODE  with 5 ($TIME5) and 10 ($TIME10) minute pre-warnings"
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):T=$TIME:M=$MODE:5w=$TIME5:10w=$TIME10" >> $runfile
		
	
	# Wait and Send 10 minute announcement
		echo "Waiting to send 10 minute warning"
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Waiting to send 10 Minute Warning at $TIME10" >> $runfile
		while [ $(date +%H:%M) != $TIME10 ]; do sleep 1; done
		
	# Start 10 minute message, add 3 second delay to beginning
		echo "Playing 10 Minute Warning for $NEWSTYPE News NOW!"
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Playing 10 Minute Warning" >> $runfile
		cat $VOICEDIR/silence3.ul "$VOICEDIR/${NEWSTYPE}start10.ul" > /tmp/$NEWSTYPE/news.ul
		/usr/bin/asterisk -rx "rpt $MODE $NODE /tmp/$NEWSTYPE/news"
	   
	# Wait Send 5 minute announcement
		echo "Waiting to send 5 minute warning"
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Waiting to send 5 Minute Warning at $TIME5" >> $runfile
		while [ $(date +%H:%M) != $TIME5 ]; do sleep 1; done
		
	#Start 5 minute message, add 3 second delay to beginning
		echo "Playing 5 Minute Warning for $NEWSTYPE News NOW!"
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Playing 5 Minute Warning" >> $runfile
		cat $VOICEDIR/silence3.ul "$VOICEDIR/${NEWSTYPE}start5.ul" > /tmp/$NEWSTYPE/news.ul
		/usr/bin/asterisk -rx "rpt $MODE $NODE /tmp/$NEWSTYPE/news"
	
	# wait for start time
		echo "Waiting for start time"
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Waiting to Start at $TIME" >> $runfile
		while [ $(date +%H:%M) != $TIME ]; do sleep 1; done			
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Waiting for node to settle." >> $runfile
		sleep 10
		
		# Leaving cronews - going to gonews...
		echo "Changing to gonews now"
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Leaving cronnews" >> $runfile
		rm -f /tmp/$[NODE]cronnewspid.txt
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):$me Script Ended" >> $runfile
		echo "$(date +%Y-%m-%d.%H:%M:%S):($me):Calling  gonews." >> $runfile
	# Calling gonews:
				
		/etc/asterisk/local/newsme/gonews $NEWSTYPE $NODE $PLAYALL 	

	exit 0
	